{"version":3,"sources":["quote_stop.png","quote_start.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","apiData","setApiData","apiUrl","window","useEffect","fetch","mode","then","res","json","data","quote","author","sentiment","serverip","className","src","quoteStart","alt","quoteStop","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,uMC8C5BC,MAjCf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,KAELC,EAAWC,OAAM,UAAjBD,OASR,OAPAE,qBAAU,WACRC,MAAMH,EAAQ,CAACI,KAAM,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACzDT,EAAW,CAACS,EAAKC,MAAMD,EAAKE,OAAOF,EAAKG,UAAUH,EAAKI,gBAExD,IAID,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACvB,2BACS,yBAAKC,IAAKC,IAAYF,UAAU,YAAYG,IAAI,UACvD,0BAAMH,UAAU,cACff,EAAQ,GACN,0BAAMe,UAAU,cAAcf,EAAQ,IAEtC,0BAAMe,UAAU,kBAAhB,6DAA8Fb,EAA9F,MAGI,0BAAMa,UAAU,eAAhB,YAA4Cf,EAAQ,IACpD,yBAAKgB,IAAKG,IAAWJ,UAAU,YAAYG,IAAI,WAExD,uBAAGH,UAAU,eAAb,mBAA8Cf,EAAQ,IACtD,uBAAGe,UAAU,QAAb,2BAA+Cf,EAAQ,OC5BpCoB,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19593398.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quote_stop.903cae29.png\";","module.exports = __webpack_public_path__ + \"static/media/quote_start.9a982c54.png\";","//import React from 'react';\nimport React, { useState, useEffect } from 'react';\nimport quoteStop from './quote_stop.png';\nimport quoteStart from './quote_start.png';\nimport './App.css';\n\n//export const MyComponent = () => {\n//  const { apiUrl } = window['runConfig'];\n//  return (\n//    <div>Runtime config apiUrl: {apiUrl}</div>\n//  )\n//}\n\nfunction App() {\n  const [apiData, setApiData] = useState([]);\n  const { apiUrl } = window['runConfig'];\n\n  useEffect(() => {\n    fetch(apiUrl, {mode: 'cors'}).then(res => res.json()).then(data => {\n      setApiData([data.quote,data.author,data.sentiment,data.serverip]);\n    });\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t<p>\n          <img src={quoteStart} className=\"img-quote\" alt=\"quote\" />\n\t  <font className=\"font-quote\"> \n\t  {apiData[0] ? (\n\t     <font className=\"font-quote\">{apiData[0]}</font>\n\t  ) : (\n\t     <font className=\"font-quote-err\">Everything fails all the time. NO DATA FROM BACKEND!&nbsp; ({apiUrl})</font>\n\t  )}\n\t  </font> \n          <font className=\"font-author\">&nbsp;-&nbsp;{apiData[1]}</font>\n          <img src={quoteStop} className=\"img-quote\" alt=\"quote\" />\n\t</p>\n\t<p className=\"p-sentiment\"> Sentiment:&nbsp; {apiData[2]}</p>\n\t<p className=\"p-ip\"> Backend Server IP:&nbsp; {apiData[3]}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}